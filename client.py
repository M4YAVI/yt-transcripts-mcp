import asyncio
import sys

import ollama
from fastmcp import Client
from fastmcp.exceptions import ClientError

# Windows compatibility fix
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())


async def main():
    print("ðŸ¤– Connecting to HTTP MCP server...")
    # Connect to the HTTP server instead of the file
    client = Client("http://127.0.0.1:8000/mcp/")

    async with client:
        print("\nâœ… Client connected to HTTP server.")

        # Test with a video that has transcripts
        video_with_transcript = "https://www.youtube.com/watch?v=pF1UvN7SEGU"
        print(f"\n1. Fetching transcript for: {video_with_transcript}")

        try:
            result = await client.call_tool(
                "get_youtube_transcript", {"video_url": video_with_transcript}
            )
            full_transcript = result[0].text
            print("\n--- Transcript Fetched Successfully! ---")
            print(f"Transcript length: {len(full_transcript)} characters")
            print("----------------------------------------")

            # Use Ollama DeepSeek R1:8B to create intelligent notes with streaming
            print("\nðŸ§  Generating 200IQ genius notes with DeepSeek R1:8B...")
            print("\n--- ðŸ§  200IQ GENIUS NOTES ---\n")

            # Stream the response
            stream = ollama.chat(
                model="deepseek-r1:8b",
                messages=[
                    {
                        "role": "system",
                        "content": """You are a 200IQ genius note-taker. Your task is to create fast, skimmed notes that capture ALL valuable information without losing any important details. 

Your notes should be:
- Extremely concise but comprehensive
- Structured with clear headings and bullet points
- Capture key concepts, insights, and actionable items
- Include important quotes or specific details
- Organized logically for easy scanning
- Written for someone who needs to quickly understand the entire content

Format your notes with clear sections and use markdown formatting.""",
                    },
                    {
                        "role": "user",
                        "content": f"""Please create fast, intelligent notes from this YouTube transcript. Capture ALL valuable information without losing important details:

TRANSCRIPT:
{full_transcript}

Create comprehensive yet concise notes that a 200IQ person would make for quick reference.""",
                    },
                ],
                stream=True,  # Enable streaming
            )

            # Collect the full response while streaming
            genius_notes = ""
            for chunk in stream:
                content = chunk["message"]["content"]
                print(content, end="", flush=True)  # Print each chunk as it arrives
                genius_notes += content

            print("\n\n--- END OF NOTES ---")

            # Save notes to file
            with open("youtube_notes.md", "w", encoding="utf-8") as f:
                f.write(f"# YouTube Video Notes\n\n")
                f.write(f"**Video URL:** {video_with_transcript}\n\n")
                f.write(f"**Generated by:** DeepSeek R1:8B\n\n")
                f.write("---\n\n")
                f.write(genius_notes)

            print(f"\nðŸ’¾ Notes saved to 'youtube_notes.md'")

        except ClientError as e:
            print(f"ðŸ”¥ Error fetching transcript: {e}")

        # Test error handling with a video that might not have transcripts
        video_without_transcript = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
        print(f"\n2. Testing error handling with: {video_without_transcript}")

        try:
            await client.call_tool(
                "get_youtube_transcript", {"video_url": video_without_transcript}
            )
        except ClientError as e:
            print("\n--- Error Handled Correctly! ---")
            print(f"ðŸ”¥ Expected error: {e}")
            print("----------------------------------")


if __name__ == "__main__":
    asyncio.run(main())
